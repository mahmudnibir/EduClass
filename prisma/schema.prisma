// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?   @db.Text
  location      String?
  language      String?   @default("English")
  notifications Json?
  privacy       Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Study related
  hostedGroups    StudyGroup[]   @relation("GroupHost")
  memberGroups    StudyGroup[]   @relation("GroupMembers")
  hostedSessions  StudySession[]  @relation("SessionHost")
  quizzes         Quiz[]
  quizAttempts    QuizAttempt[]
  achievements    Achievement[]
  studyTime       StudyTime[]

  // Auth and Chat
  accounts      Account[]
  sessions      Session[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  conversations    Conversation[] @relation("ConversationParticipants")
  sessionParticipants StudySession[] @relation("SessionParticipants")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hostId      String
  host        User     @relation("GroupHost", fields: [hostId], references: [id])
  members     User[]   @relation("GroupMembers")
  sessions    StudySession[]
  resources   Resource[]
}

model StudySession {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hostId      String
  host        User     @relation("SessionHost", fields: [hostId], references: [id])
  groupId     String
  group       StudyGroup @relation(fields: [groupId], references: [id])
  participants User[]   @relation("SessionParticipants")
}

model Message {
  id            String      @id @default(cuid())
  content       String
  type          String      @default("text")
  fileUrl       String?
  senderId      String
  receiverId    String
  conversationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isRead        Boolean     @default(false)
  sender        User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver      User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation  Conversation @relation(fields: [conversationId], references: [id])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // document, video, link, etc.
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupId     String
  group       StudyGroup @relation(fields: [groupId], references: [id])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  questions   Question[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  attempts    QuizAttempt[]
}

model Question {
  id          String   @id @default(cuid())
  text        String
  options     String[]
  correctAnswer Int
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

model QuizAttempt {
  id          String   @id @default(cuid())
  score       Int
  answers     Int[]
  createdAt   DateTime @default(now())
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model StudyTime {
  id          String   @id @default(cuid())
  duration    Int      // in minutes
  subject     String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String    @id @default(cuid())
  name      String?
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  participants User[] @relation("ConversationParticipants")
}
